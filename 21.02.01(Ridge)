from sklearn.linear_model import RidgeCV 
from sklearn.linear_model import Ridge
from sklearn.metrics import r2_score, mean_absolute_error

model = Ridge(alpha=alpha, normalize=True)  
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

#MAE for test
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
    
print(f'Test MAE: ${mae:,.0f}')
print(f'Test R2: {r2:,.3f}')
    
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline      #make_pipeline 모델들을 간편하게 쓸 수 있게 해줌

def RidgeRegression(degree=3, **kwargs):
    return make_pipeline(PolynomialFeatures(degree), 
                         Ridge(**kwargs))


for alpha in [0.001, 0.01, 0.0025, 0.05, 0.09, 0.12, 0.4, 1.0, 1, 5, 10, 100]:
        
    print(f'Ridge Regression, alpha={alpha}')

    # Ridge 모델 학습
    model = RidgeRegression(alpha=alpha, normalize=True)
    model.fit(X_train, y_train)                          #fit        -위에 원핫인코딩이랑 헷갈리지 말기..fit_transform
    y_pred = model.predict(X_test)                       #predict

    # MAE for test
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print(f'Test MAE: ${mae:,.0f}')            
    print(f'R2 Score: {r2:,.4f}\n')

coefs = model.named_steps["ridge"].coef_                 #ridge 단계의 steps--좀 이해 안 가네, named_steps는 pipeline과 관련있음
print(f'Number of Features: {len(coefs)}')

#number of features: 1330개->릿지를 써서 적당히 하자...빨리 모델 만들고, 굳이 어떤 feature인지 알고싶진 않을 때

lasso
