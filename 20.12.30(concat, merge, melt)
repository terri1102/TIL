# Data manipulating

### 1. concat
df = pd.concat([df1, df2, df3, df4, df5, df6], axis = 0)                #axis = 0 : 행에 붙이기 axis =1 : 열에 붙이기
result = pd.concat(pieces, keys=["z", "y"])                             # concat하면서 column이름을 key값으로 

### append : concat 보다 먼저 만들어진 함수
result = df1.append([df2, df3])

#### .reset_index() : index를 리셋해서 column 기준으로 합칠 수 있게 해줌
df = pd.concat([df.reset_index(), df2['종목'].head(6)], axis = 1)      #df2['종목'].head(6): df2의 '종목' column의 위에서 6줄

### 2. merge
df.merge(df2, how = 'inner', on = '종목')                              #df뒤에 df2를 붙임
'inner' : 공통 key를 기준으로 합침
'left': 왼쪽 df만의 key를 사용함, key order 불변.
'right': 오른쪽 df만의 key를 사용함, key order 불변.
'outer': 모든 df의 key를 사용, key를 사전순으로 배열
'cross': 모든 df에서 데카르트 좌표계( cartesian product)를 만듦. 왼쪽 df의 key order 유지

### Conditioning...
# 필터링 조건 (Condition) 설정
condition = (df['순이익률'] > 0) # Type Cast
df_subset = df[condition]

### &와 | 이용해 여러 조건 설정 가능
condition = ( (df['순이익률'] > 0) & (df['순이익률'] < 10))

df1 = pd.DataFrame({'a': ['123', '2334', '234', '3445', '545'],
                    'b': ['도레미', '파솔라', '시', '도레미', '레']})
condition1 = ((df1['b'] == '도레미') | (df1['b'] == '파솔라'))         #1.컨디션 설정 2.subset=df[condition]
df_subset1 = df1[condition1]
df_subset1['종류'] = '음계'
df_subset1

### filter
df.filter(items=['one', 'three'])                                      #'one','three' column만 나타남
df.filter(like='bbi', axis=0)                                          # 행(axis=0)에서 'bbi' 글자가 들어간 행을 출력 

### groupby: 서로 같은 값을 갖는 행끼리 묶어줌
df_subset.groupby('테마').순이익률.mean()                              #이때 df.groupby('column').다른column.mean()->다른 column이름에 () 들어가면 오류남

### tidy

### Wide to tidy: melt
table1 = dfd.reset_index()                                             # 만약 id_vars로 쓸 column이 index에 가있다면 column으로 보내줘야 하기 떄문에

tidy1 = table1.melt(id_vars = 'index', value_vars = ['A', 'B'])         #id_vars: Column(s) to use as identifier variables. value_vars: columns to unpivot
tidy1

### tidy to wide
wide = tidy1.pivot_table(index = 'row', columns = 'column', values = 'value')
wide                                                                    # index: unique identifier
                                                                        # columns: "wide" 데이터에서 column별로 다르게 하고자 하는 값.
                                                                        # values: 결과값이 들어가는 곳 (wide 데이터프레임의 내용에 들어갈 값)


### Pipe and Chaining
